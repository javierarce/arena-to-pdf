#!/usr/bin/env ruby

require 'arena'
require 'open-uri'
require 'dotenv/load'
require 'fileutils'
require 'uri'

class ArenaDownloader

  attr_accessor :url

  def initialize(url, dir)
    @url = url
    @channel = nil
    @dirname = dir || ENV['PDF_FOLDER_PATH']
    puts @dirname
  end

  def showInfo(message)
    puts "\033[32m#{message}\033[0m" 
  end

  def showError(message)
    puts "\033[31m#{message}\033[0m" 
  end

  def login
    Arena.configure do |config|
      config.access_token = ENV['ACCESS_TOKEN']
    end
  end

  def start
    login

    slug = URI(@url).path.split('/').last

    begin
      @channel = Arena.channel(slug)
    rescue Exception => e
      showError('Channel not found')
    end

    download if @channel
  end

  def createDirectory
    @dirname = @dirname ?  "#{@dirname}/#{@channel.title}" : "PDF/#{@channel.title}"

    unless Dir.exists?(@dirname)
      FileUtils.mkdir_p(@dirname) 
    end
  end

  def downloadAttachment(title, attachment, index, total)
    puts "[#{index}/#{total}] \033[31m#{title}\033[0m" 

    open("#{@dirname}/#{title}.pdf", 'wb') do |file|
      file << open(attachment.url).read
    end
  end

  def download
    connectables = @channel.contents.select do |c|
      c if c.attachment and c.attachment.extension === 'pdf'
    end

    if connectables.length === 0
      showError("#{@channel.title} doesn't contain any PDF ")
      return
    end

    showInfo("Downloading #{connectables.length} files from #{@channel.title}")

    createDirectory

    connectables.each_with_index do |c, index| 
      downloadAttachment(c.title, c.attachment, index + 1, connectables.length)
    end 
  end
end

if ARGV[0].nil?
  puts 'Command syntax: ./download CHANNEL_URL [PDF_FOLDER_PATH]'
else
  downloader = ArenaDownloader.new(ARGV[0], ARGV[1])
  downloader.start
end
