#!/usr/bin/env ruby

require 'arena'
require 'open-uri'
require 'dotenv/load'
require 'fileutils'
require 'uri'

PDF_EXTENSION = 'pdf'
MANIFEST_PATH = 'manifest.txt'

class ArenaDownloader

  attr_accessor :url

  def initialize(url, dir)
    @per_page = 100
    @url = url
    @channel = nil
    @dirname = dir || ENV['PDF_FOLDER_PATH']
    @manifest_lines = []
  end

  def showMessage(message, color = '32')
    puts "\033[#{color}m#{message}\033[0m" 
  end

  def showInfo(message)
    showMessage(message)
  end

  def showError(message)
    showMessage(message, 31)
  end

  def login
    Arena.configure do |config|
      config.access_token = ENV['ACCESS_TOKEN']
    end
  end

  def sanitize_filename(filename)
    filename.gsub('/', ' ')
  end

  def start
    read_manifest
    login

    if @url
      download_from_url
    else 
      download_from_manifest
    end
  end

  def download_from_manifest
    @manifest_lines.each do |slug|
      download_from_slug(slug)
      puts "\n"
    end
  end

  def download_from_url
    slug = URI(@url).path.split('/').last
    write_manifest(slug)

    download_from_slug(slug)
  end

  def download_from_slug(slug)
    begin
      @channel = Arena.channel(slug, { page: 0, per: @per_page })
      blocksCount = @channel.length

      extraPage = blocksCount % @per_page == 0 ?  0 : 1
      pagesCount = (blocksCount / @per_page) + extraPage

      showInfo("Downloading from #{blocksCount} #{blocksCount == 1 ? 'block' : 'blocks'} / #{@channel.title} -â†’ #{@dirname}/#{@channel.title}")

      createDirectory

      pagesCount.times do |c|
        page = c + 1
        @channel = Arena.channel(slug, { page: page, per: @per_page })
        download(@channel.contents, page, pagesCount)
      end

    rescue Exception => e
      showError("Channel not found #{e}")
    end
  end

  def createDirectory
    @dirname = @dirname ? "#{@dirname}/#{@channel.title}" : "#{PDF_EXTENSION}/#{@channel.title}"

    unless Dir.exists?(@dirname)
      FileUtils.mkdir_p(@dirname) 
    end
  end

  def downloadAttachment(title, attachment, page, index, total)
    filename = "#{@dirname}/#{sanitize_filename title}"
    filename += ".#{PDF_EXTENSION}" unless title.end_with? ".#{PDF_EXTENSION}"

    unless File.exist?(filename)
      puts "\033[34m#{"%02d" % index}/#{"%02d" % total}\033[1m \033[31m#{title}\033[0m" 

      open(filename, 'wb') do |file|
        file << open(attachment.url).read
      end
      sleep 2
    else
      puts "\033[37m#{"%02d" % index}/#{"%02d" % total}\033[1m \033[37m#{title}\033[0m" 
    end
  end

  def download(content, page, pagesCount)
    connectables = content.select do |c|
      c if c.respond_to?(:attachment) and c.attachment and c.attachment.extension === 'pdf'
    end

    if connectables.length === 0
      showError("#{@channel.title} doesn't contain any PDF")
      return
    end

    showInfo("\nPage #{page} of #{pagesCount}\n")

    connectables.each_with_index do |c, index| 
      downloadAttachment(c.title, c.attachment, page, index + 1, connectables.length)
    end 
  end

  def write_manifest(source)
    @manifest_lines << source unless @manifest_lines.include?(source)

    File.open(MANIFEST_PATH, 'w') do |file|
      @manifest_lines.uniq.each do |line|
        file.puts line
      end
    end
  end

  def read_manifest
    if File.exist?(MANIFEST_PATH)
      open(MANIFEST_PATH, 'rb') do |file|
        file.each_line do |line|
          @manifest_lines << line.strip
        end
      end
    end
  end
end

if ARGV[0].nil?
  puts 'Command syntax: ./download CHANNEL_URL [PDF_FOLDER_PATH]'
  puts 'Command syntax: ./download [PDF_FOLDER_PATH] --from-manifest'
else
  if ARGV.include?('--from-manifest')
    index = ARGV.find_index('--from-manifest')
    downloader = ArenaDownloader.new(nil, ARGV[1 - index])
  else
    downloader = ArenaDownloader.new(ARGV[0], ARGV[1])
  end

  downloader.start
end
